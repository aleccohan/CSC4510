%{
#include<ctype.h>
#include<iostream>
#include<stdio.h>
#include<math.h>

using namespace std;
static int var[26];

int yyparse(void);
int yylex(void);

void yyerror(const char *);
%}

%union{
   int val;
   int var_pos;
}
%token <var_pos> ID
%token <val> NUMBER
%token EQUAL PLUS MULT NEWLINE LPAREN RPAREN DIVIDE MINUS MOD CARROT
%type <val> expr term sfactor efactor pfactor stmt

%%

stmt_list : stmt NEWLINE
	  | stmt_list stmt NEWLINE
	  ;
stmt	 : ID EQUAL expr 		  {var[$1] = $3; cout << "=" << $3 << endl;}
	 | expr		 				  {cout << "=" << $1 << endl;}
	 ;
expr	 : expr PLUS term  		  {$$ = $1 + $3;}
	 | expr MINUS term     		  {$$ = $1 - $3;}
	 | term		  		    	  {$$ = $1;}
	 ;
term	 : term MULT sfactor 	  {$$ = $1 * $3;}
	 | term MOD sfactor 		  {$$ = $1 % $3;}
	 | term DIVIDE sfactor		  {$$ = $1 / $3;}
	 | sfactor	    			  {$$ = $1;}
	 ;
sfactor	 : MINUS efactor		  {$$ = - $2;}
	 | efactor					  {$$ = $1;}
	 ;
efactor	 : efactor CARROT pfactor {$$ = pow($1, $3);}
	 | pfactor 					  {$$ = $1;}
pfactor	 : LPAREN expr RPAREN 	  {$$ = $2;}
	 | NUMBER 	      			  {$$ = $1;}
	 | ID 		      			  {$$ = var[$1];}
	 ;

%%

int main(void)
{
   yyparse();
   return 0;
}

void yyerror(const char *message)
{
   cout << message << endl;
}
