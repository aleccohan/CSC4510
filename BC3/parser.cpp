#include "general.h"

/* expr
   Parses strings in the language generated by the rule:
   <expr> -> <term> {(+ | -) <term>}
 */
int expr() 
{
   printf("Enter <expr>\n");

   int right,left,operation;

   /* Parse the first term */
   left = term();

   /* As long as the next token is + or -, get
      the next token and parse the next term */
   while (nextToken == ADD_OP || nextToken == SUB_OP) {
      operation = nextToken;
      lex();
      right = term();
      if(operation == ADD_OP)
         left+=right;
      else
         left-=right;
   }
   printf("Exit <expr>\n");

   return left;
} /* End of function expr */


/* term
 *  Parses strings in the language generated by the rule:
 *  <term> -> <factor> {(* | /) <factor>)
 */
int term() 
{
   printf("Enter <term>\n");
   /* Parse the first factor */
   
   int right,left,operation;

   left = factor();
   /* As long as the next token is * or /, get the
      next token and parse the next factor */
   while (nextToken == MULT_OP || nextToken == DIV_OP) {
      operation = nextToken;
      lex();
      right = factor();
      if(operation == MULT_OP)
         left*=right;
      else
         left/=right;
   }
   printf("Exit <term>\n");

   return left;
} /* End of function term */


/* factor
 * Parses strings in the language generated by the rule:
 * 
 *   <factor> -> id | int_constant | ( <expr  )
 *
 */
int factor() 
{
   printf("Enter <factor>\n");
   int val;
   /* Determine which RHS */
   if (nextToken == IDENT || nextToken == INT_LIT)
      /* Get the next token */
      val = lex();

   /* If the RHS is ( <expr> ), call lex to pass over the left 
      parenthesis, call expr and check for the right parenthesis */
   else if (nextToken == LEFT_PAREN) {
         lex();
         expr();
         if (nextToken == RIGHT_PAREN)
            lex();
         else
            error("Right without left paren");
   } else {
   /* It was not an id, an integer literal, or a left
       parenthesis */
       error("expected an id, integer, or a left paren");
   } /* End of else */
   printf("Exit <factor>\n");;
}/* End of function factor */

void error(const char *message)
{
   printf("Error: %s\n",message);
}
